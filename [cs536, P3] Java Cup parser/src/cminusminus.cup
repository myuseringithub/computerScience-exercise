/**********************************************************************
 Java CUP specification for a parser for C-- programs.
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/*
 * The code below redefines method syntax_error to give better error messages
 * than just "Syntax error".
 */
parser code {:
    public void syntax_error(Symbol currToken) {
        if (currToken.value == null) {
            ErrMsg.fatal(0,0, "Syntax error at end of file");
        }
        else {
            ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                        ((TokenVal)currToken.value).charnum,
                        "Syntax error");
        }
        System.exit(-1);
    }
:};

/* Terminals (tokens returned by the scanner). */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		        REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;
terminal                UMINUS; // dummy terminal for precedence setting

/* Non-terminals */
non terminal ProgramNode      program;
non terminal LinkedList       list_decl;
non terminal DeclNode         decl;
non terminal LinkedList       list_varDecl;
non terminal VarDeclNode      varDecl;
non terminal                  fnDecl;
non terminal StructDeclNode   structDecl;
non terminal                  structBody;
non terminal                  formals;
non terminal LinkedList       list_formals;
non terminal                  formalDecl;
non terminal                  fnBody;
non terminal LinkedList       list_stmt;
non terminal StmtNode         stmt;
non terminal                  assignExp;
non terminal                  exp;
non terminal ExpNode          term;
non terminal                  fncall;
non terminal LinkedList       list_actual;
non terminal TypeNode         type;
non terminal                  loc;
non terminal IdNode           id;

/* Precedences & Associativity */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left UMINUS, NOT;

start with program;

/* The grammar with actions */
program                                                                                                     ::= 
            list_decl:x                                                                                     {:            
                RESULT = new ProgramNode(new DeclListNode(x));
                                                                                                    :};
list_decl                                                                                                   ::= 
            list_decl:x1 decl:x2                                                                            {:       
                x1.addLast(x2);
                RESULT = x1;
                                                                                                    :}
|           /* epsilon */                                                                                   {: 
                RESULT = new LinkedList<DeclNode>();
                                                                                                    :};
decl                                                                                                        ::= 
            varDecl:x                                                                                       {: 
                RESULT = new DeclNode();
                                                                                                     :}
|           fnDecl:x                                                                                        {: 
                RESULT = new DeclNode();
                                                                                                     :}
|           structDecl:x                                                                                    {: 
                 // struct definitions only at top level
                 RESULT = new DeclNode();
                                                                                                     :};

list_varDecl                                                                                                ::= 
            list_varDecl varDecl                                                                            {: 
                                                                                    
                                                                                                :}
|           /* epsilon */                                                                                   {: 
                                                                                                    
                                                                                                    :};

varDecl                                                                                                     ::= 
            type:t id:i SEMICOLON                                                                           {:
                RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);         
                                                                                      :}
|           STRUCT id id SEMICOLON                                                                          {:
                RESULT = new VarDeclNode();
                                                                                      :};

fnDecl                                                                                                      ::= 
            type id formals fnBody                                                                          {:

                                                                                :};

structDecl                                                                                                  ::= 
            STRUCT id:i LCURLY structBody:s RCURLY SEMICOLON                                                {:
                RESULT = new StructDeclNode();
                                                                                    :};
structBody                                                                                                  ::= 
            structBody varDecl                                                                              {:
                
                                                                                    :}
|           varDecl:v                                                                                       {:
                RESULT = v;
                                                                                    :};

formals                                                                                                     ::= 
            LPAREN RPAREN                                                                                   {:

                                                                                                :}
|           LPAREN list_formals RPAREN                                                                       {:
                
                                                                                                :};

list_formals                                                                                                 ::=
            formalDecl                                                                                      {:

                                                                                :}
|           formalDecl COMMA list_formals                                                                    {:
                
                                                                                                :};

formalDecl                                                                                                  ::= 
            type id                                                                                         {:
                    // note: no struct parameters
                                                                                    :};

fnBody                                                                                                      ::= 
            LCURLY list_varDecl list_stmt RCURLY                                                             {:
                                                                                    
                                                                                    :};

list_stmt                                                                                                    ::= 
            list_stmt stmt                                                                                   {:
                                                                                    
                                                                                                  :}
|           /* epsilon */                                                                                   {:
                                                                                                    
                                                                                                    :};

stmt                                                                                                        ::= 
            assignExp SEMICOLON                                                                             {:
                                                                                            
                                                                                            :}
|           loc PLUSPLUS SEMICOLON                                                                          {:
                                                                                                            
                                                                                                            :}
|           loc MINUSMINUS SEMICOLON                                                                        {:
                                                                                                            
                                                                                                            :}
|           CIN READ loc SEMICOLON                                                                          {:
                                                                                                            
                                                                                                            :}
|           COUT WRITE exp SEMICOLON                                                                        {:        
                                                                                                            
                                                                                                            :}
|           IF LPAREN exp RPAREN LCURLY list_varDecl list_stmt RCURLY                                        {:
                                                                                                            
                                                                                                            :}
|           IF LPAREN exp RPAREN LCURLY list_varDecl list_stmt RCURLY ELSE LCURLY list_varDecl list_stmt RCURLY                                                                                                      {:
                                                                                                            
                                                                                                            :}
|           WHILE LPAREN exp RPAREN LCURLY list_varDecl list_stmt RCURLY                                     {:
                                                                                                            
                                                                                                            :}
|           REPEAT LPAREN exp RPAREN LCURLY list_varDecl list_stmt RCURLY                                    {:
                                                                                                            
                                                                                                            :}
|           RETURN exp SEMICOLON                                                                            {:
                                                                                                            
                                                                                                            :}
|           RETURN SEMICOLON                                                                                {:
                                                                                                            
                                                                                                            :}
|           fncall SEMICOLON                                                                                {:
                                                                                                            
                                                                                                            :};

assignExp                                                                                                   ::= 
            loc ASSIGN exp                                                                                  {:

                                                                                                     :};                                 

exp                                                                                                         ::= 
            assignExp                                                                                       {:

                                                                                                        :}
|           exp PLUS exp                                                                                    {:
                
                                                                                                    :}
|           exp MINUS exp                                                                                   {:
                
                                                                                                    :}
|           exp TIMES exp                                                                                   {:
                
                                                                                                    :}
|           exp DIVIDE exp                                                                                  {:
                
                                                                                                    :}
|           NOT exp                                                                                         {:
                
                                                                                                    :}
|           exp AND exp                                                                                     {:
                
                                                                                                    :}
|           exp OR exp                                                                                      {:
                
                                                                                                    :}
|           exp EQUALS exp                                                                                  {:
                
                                                                                                    :}
|           exp NOTEQUALS exp                                                                               {:
                
                                                                                                    :}
|           exp LESS exp                                                                                    {:
                
                                                                                                    :}
|           exp GREATER exp                                                                                 {:
                
                                                                                                    :}
|           exp LESSEQ exp                                                                                  {:
                
                                                                                                    :}
|           exp GREATEREQ exp                                                                               {:
                
                                                                                                    :}
|           MINUS term                                                                                      {:
                
                                                                                                    :}
            %prec UMINUS
|           term                                                                                            {: 
                
                                                                                                    :};


term                                                                                                        ::= 
            loc                                                                                             {:

                                                                                                        :}
|           INTLITERAL:x /*✅*/                                                                                      {:
                RESULT = new IntLitNode(x.linenum, x.charnum, x.intVal);
                                                                                                            :}
|           STRINGLITERAL:x /*✅*/                                                                            {:
                RESULT = new StringLitNode(x.linenum, x.charnum, x.strVal); 
                                                                                                            :}
|           TRUE:x /*✅*/                                                                                           {:
                RESULT = new TrueNode(x.linenum, x.charnum);
                                                                                                            :}
|           FALSE:x /*✅*/                                                                                          {:
                RESULT = new FalseNode(x.linenum, x.charnum);
                                                                                                            :}
|           LPAREN exp RPAREN                                                                               {:
                
                                                                                                :}
|           fncall                                                                                          {:
                
                                                                                                :};

fncall                                                                                                      ::=  
            id LPAREN RPAREN                                                                                {:
                    // fn call with no args
                                                                                                        :}
|           id LPAREN list_actual RPAREN                                                                     {:
                    // with args
                                                                                                        :};

list_actual                                                                                                  ::= 
            exp                                                                                             {:

                                                                                                         :}
|           list_actual COMMA exp                                                                            {:
                
                                                                                                        :};

type /*✅*/                                                                                                       ::= 
            INT                                                                                             {: 
                RESULT = new IntNode();
                                                                                                            :}
|           BOOL                                                                                            {:
                RESULT = new BoolNode();
                                                                                                            :}
|           VOID                                                                                            {:
                RESULT = new VoidNode();
                                                                                                            :};

loc                                                                                                         ::= 
            id                                                                                              {:
                                                                                    
                                                                                                            :}
|           loc DOT id                                                                                      {:
                                                                                                    
                                                                                                            :};

id /*✅*/                                                                                                          ::= 
            ID:x                                                                                              {: 
                RESULT = new IdNode(x.linenum, x.charnum, x.idVal);
                                                                                                            :};

