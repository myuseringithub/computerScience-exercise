/**********************************************************************
 Grammar for C-- programs
 - ambiguous grammar
 **********************************************************************/
program         ::= list_decl
                                                                            ;

list_decl        ::= list_decl decl
                | /* epsilon */
                                                                            ;

decl            ::= varDecl
                | fnDecl
                | structDecl     // struct definitions only at top level
                                                                            ;

list_varDecl     ::= list_varDecl varDecl
                | /* epsilon */
                                                                            ;

varDecl         ::= type id SEMICOLON
                | STRUCT id id SEMICOLON
                                                                            ;

fnDecl          ::= type id formals fnBody
                                                                            ;

structDecl      ::= STRUCT id LCURLY structBody RCURLY SEMICOLON
                                                                            ;

structBody      ::= structBody varDecl
                | varDecl
                                                                            ;

formals         ::= LPAREN RPAREN
                | LPAREN list_formals RPAREN
                                                                            ;

list_formals     ::= formalDecl
                | formalDecl COMMA list_formals
                                                                            ;

formalDecl      ::= type id        // note: no struct parameters
                                                                            ;

fnBody          ::= LCURLY list_varDecl list_stmt RCURLY
                                                                            ;

list_stmt        ::= list_stmt stmt
                | /* epsilon */
                                                                            ;

stmt            ::= assignExp SEMICOLON
                | loc PLUSPLUS SEMICOLON
                | loc MINUSMINUS SEMICOLON
                | CIN READ loc SEMICOLON
                | COUT WRITE exp SEMICOLON
                | IF LPAREN exp RPAREN LCURLY list_varDecl list_stmt RCURLY
                | IF LPAREN exp RPAREN LCURLY list_varDecl list_stmt RCURLY ELSE LCURLY list_varDecl list_stmt RCURLY
                | WHILE LPAREN exp RPAREN LCURLY list_varDecl list_stmt RCURLY
		        | REPEAT LPAREN exp RPAREN LCURLY list_varDecl list_stmt RCURLY
                | RETURN exp SEMICOLON
                | RETURN SEMICOLON
                | fncall SEMICOLON
                                                                            ;

assignExp       ::= loc ASSIGN exp
                                                                            ;

exp             ::= assignExp
                | exp PLUS exp
                | exp MINUS exp
                | exp TIMES exp
                | exp DIVIDE exp
                | NOT exp
                | exp AND exp
                | exp OR exp
                | exp EQUALS exp
                | exp NOTEQUALS exp
                | exp LESS exp
                | exp GREATER exp
                | exp LESSEQ exp
                | exp GREATEREQ exp
                | MINUS term
                | term
                                                                            ;

term            ::= loc
                | INTLITERAL
                | STRINGLITERAL
                | TRUE
                | FALSE
                | LPAREN exp RPAREN
                | fncall
                                                                            ;

fncall          ::=  id LPAREN RPAREN   // fn call with no args
                | id LPAREN list_actual RPAREN  // with args
                                                                            ;

list_actual      ::= exp
                | list_actual COMMA exp
                                                                            ;

type            ::= INT
                | BOOL
                | VOID
                                                                            ;

loc             ::= id
                | loc DOT id

id              ::= ID
                                                                            ;

