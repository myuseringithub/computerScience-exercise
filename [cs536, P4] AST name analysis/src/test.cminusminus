// test.cminusminus should contain code with no errors that exercises all of the
// name-analysis methods that you wrote for the different AST nodes. This means
// that it should include (good) declarations of all of the different kinds of
// names in all of the places that names can be declared and it should include
// (good) uses of names in all kinds of statements and expressions.

int x; bool y;
struct S1 {int x; bool y; };
struct S2 {int x; bool y; struct S1 s;};

void f1(int x, bool y) {}
int f2() {int x; bool y;struct S1 s;}
void f3(int x1, bool y1) {int x2; bool y2;struct S1 s;}

void f4() {
    int e; int x; bool y; struct S1 s1; struct S2 s2; 
    
    f4(x, y, s1, s2, s1.x, s1.y, s2.x, s2.y, s2.s, s2.s.x, s2.s.y);
    f1(f2(f3()));

    x=y; x=x; x=s1.x; s1.x=x;
    x=y; x++; y--; cin>> y; cout<< y; x = y == 1;
    s2.x = x; s2.y = y; s2.s.x = s2.s.y;

    f1(x + s1.y * 2, s2); f2(); f4();
    f1(
        x+y, x-y, x*y, x/y, !x, x&&y, x||y, x==y, x!=y, x<y, x>y, x<=y, x>=y, -x,
        123, "abc", true, false, (x), f1()
    );


    // statements & nestingnesting
    if(e){ int x2; bool y2;struct S1 s;
        if(e){ int x2; bool y2;struct S1 s;
            while(e){ int x2; bool y2;struct S1 s;
                repeat(e){ int x2; bool y2;struct S1 s; }
            }
        }
    } else { int x2; bool y2;struct S1 s; }

    return x; return; 
}

// mixed organization
bool c;
struct S { int c; };
void main(int x, int y) {
    struct S s;
    c = s.c;
    x++;
    c = s.c = x > y || main(x, y) + 0;
    if(!c && (c * c) == c / -c) {
        bool z;
        repeat(z = 0 && z != 3) {
            cin >> s.c;
            z--;
        }
    }
    if(x=2) { return x; } else { return; }
}

//////////// Example of adding types to declarations on unparsing
//    // Defining a struct type example
//    struct Point {
//        int x;
//        int y;
//    };
//    int f(int x, bool b) {}
//    void g() {
//        int a;
//        bool b;
//        // Declaring a variable to be of a struct type example
//        struct Point p;
//
//        // Accessing the fields of a struct example
//        p.x = a;
//
//        b = a == 3;
//        f(a + p.y * 2, b);
//        g();
//    }

//////////// Expected result:
//  struct Point {
//      int x;
//      int y;
//  };
//  int f(int x, bool b) {
//  }
//  void g() {
//      int a;
//      bool b;
//      struct Point p;
//      p(Point).x(int) = a(int);
//      b(bool) = (a(int) == 3);
//      f(int,bool->int)((a(int) + (p(Point).y(int) * 2)), b(bool));
//      g(->void)();
//  }
