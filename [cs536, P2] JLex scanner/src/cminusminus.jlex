import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
        idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

%%

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%line
%char

%eofval{
    return new Symbol(sym.EOF);
%eofval}

%state IN_QUOTE

LETTER           = [a-zA-Z]
DIGIT            = [0-9]
SPACE            = [\040\t]
UNDERSCORE       = [_]
QUOTE            = [\"]
ESCAPEDCHAR      = [\\][nt'\"?\\]
BADESCAPEDCHAR   = [\\][^nt'\"?\\]
SINGLECHAR       = [^\n\"\\]
STRING           = ({ESCAPEDCHAR}|{SINGLECHAR})

COMMENT          = (//|##).*\n
BADESCAPE        = {QUOTE}{SINGLECHAR}*{BADESCAPEDCHAR}+{SINGLECHAR}*{QUOTE}
UNTERMINATED     = {QUOTE}{STRING}*

_ID              = ({LETTER}|{UNDERSCORE})({LETTER}|{UNDERSCORE}|{DIGIT})*
_INTLITERAL      = {DIGIT}+
_STRINGLITERAL   = {QUOTE}{STRING}*{QUOTE}
_INT             = "int"
_BOOL            = "bool"
_IF              = "if"
_RETURN          = "return"
_TRUE            = "true"
_CIN             = "cin"
_VOID            = "void"
_ELSE            = "else"
_COUT            = "cout"
_WHILE           = "while"
_FALSE           = "false"
_STRUCT          = "struct"
_COMMA           = ","
_SEMICOLON       = ";"
_DOT             = "."
_READ            = ">>"
_WRITE           = "<<"
_LPAREN          = "("
_RPAREN          = ")"
_PLUSPLUS        = "++"
_MINUSMINUS      = "--"
_PLUS            = "+"
_MINUS           = "-"
_TIMES           = "*"
_DIVIDE          = "/"
_NOT             = "!"
_AND             = "&&"
_OR              = "||"
_EQUALS          = "=="
_NOTEQUALS       = "!="
_GREATER         = ">"
_LESS            = "<"
_GREATEREQ       = ">="
_LESSEQ          = "<="
_LCURLY          = "{"
_RCURLY          = "}"
_ASSIGN          = "="

%%

<YYINITIAL>{COMMENT} {
    // ignore comments 
}

<YYINITIAL>{_INT} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.INT, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_BOOL} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.BOOL, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_IF} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.IF, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_RETURN} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.RETURN, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_TRUE} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.TRUE, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_CIN} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.CIN, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_VOID} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.VOID, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_ELSE} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.ELSE, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_COUT} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.COUT, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_WHILE} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.WHILE, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_FALSE} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.FALSE, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_STRUCT} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.STRUCT, new TokenVal(yyline + 1, currentCharNum));
}

<YYINITIAL>{_ID} {
    int currentCharNum = CharNum.num;
    String value = yytext();
    CharNum.num += value.length();
    return new Symbol(sym.ID, new IdTokenVal(yyline + 1, currentCharNum, value));
}

<YYINITIAL>{_INTLITERAL} {
    int currentCharNum = CharNum.num;
    String stringValue = yytext();
    int value;

    /* check for overflow for bad integer literals (integer literals larger than
        Integer.MAX_VALUE)
        note - NumberFormatException is not specific for overflow errors, but 
        reaching this transition state would exclude parsing errors. */
    try {
        value = Integer.parseInt(stringValue);
    } catch (NumberFormatException e) {
        // TODO: the line and column numbers used in the error message should correspond to the position of the first character in the string/integer literal.
        ErrMsg.warn(yyline + 1, currentCharNum,
            "integer literal too large; using max value");
        value = Integer.MAX_VALUE;
    } finally {
        CharNum.num += stringValue.length();
        return new Symbol(sym.INTLITERAL,
            new IntLitTokenVal(yyline + 1, currentCharNum, value));
    }
}


<YYINITIAL>{_STRINGLITERAL} {
    // string literal
    int currentCharNum = CharNum.num;
    String value = yytext();
    CharNum.num += value.length();
    return new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline + 1, currentCharNum, value));
}
<IN_QUOTE> { 
    
}
<YYINITIAL>{UNTERMINATED} {
    // Unterminated string literals - a string literal is considered to be unterminated if there is a newline or end-of-file before the closing quote. (start looking for the next token after the newline)

    // TODO: line and column numbers correspond to first character
    ErrMsg.fatal(yyline + 1, CharNum.num, "unterminated string literal ignored");
    CharNum.num = 1;
}
// Bad string literals
// A string literal is "bad" if it includes a bad "escaped" character; i.e., a backslash followed by something other than an n, a t, a single quote, a double quote, another backslash, or a question mark. Issue the error message: string literal with bad escaped character ignored and ignore the string literal (start looking for the next token after the closing quote). If the string literal has a bad escaped character and is unterminated, issue the error message unterminated string literal with bad escaped character ignored, and ignore the bad string literal (start looking for the next token after the newline). Note that a string literal that has a newline immediately after a backslash should be treated as having a bad escaped character and being unterminated. For example, given:
    "very bad string \
    abc
// the scanner should report an unterminated string literal with a bad escaped character on line 1, and an identifier on line 2.
<YYINITIAL>{BADESCAPE} {
    // for a string literal that contains a bad escaped character
    // TODO: line and column numbers correspond to first character
    ErrMsg.fatal(yyline + 1, CharNum.num, "string literal with bad escaped character ignored");
    CharNum.num = 1;
}
<YYINITIAL>{UNTERMINATEDBAD} {
    // a string literal that contains a bad escaped character and is unterminated
    // TODO: line and column numbers correspond to first character
    ErrMsg.fatal(yyline + 1, CharNum.num, "unterminated string literal with bad escaped character ignored");
    CharNum.num = 1;
}


<YYINITIAL>{_COMMA} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.COMMA, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_SEMICOLON} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.SEMICOLON, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_DOT} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.DOT, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_READ} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.READ, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_WRITE} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.WRITE, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_LPAREN} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.LPAREN, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_RPAREN} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.RPAREN, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_PLUSPLUS} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.PLUSPLUS, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_MINUSMINUS} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.MINUSMINUS, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_PLUS} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.PLUS, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_MINUS} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.MINUS, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_TIMES} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.TIMES, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_DIVIDE} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.DIVIDE, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_NOT} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.NOT, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_AND} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.AND, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_OR} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.OR, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_EQUALS} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.EQUALS, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_NOTEQUALS} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.NOTEQUALS, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_GREATER} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.GREATER, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_LESS} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.LESS, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_GREATEREQ} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.GREATEREQ, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_LESSEQ} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.LESSEQ, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_LCURLY} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.LCURLY, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_RCURLY} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.RCURLY, new TokenVal(yyline + 1, currentCharNum));
}
<YYINITIAL>{_ASSIGN} {
    int currentCharNum = CharNum.num;
    CharNum.num += yytext().length();
    return new Symbol(sym.ASSIGN, new TokenVal(yyline + 1, currentCharNum));
}

\n { 
    CharNum.num = 1; 
}

{SPACE}+ { 
    CharNum.num += yytext().length(); 
}

. { 
    // Illegal characters
    ErrMsg.fatal(yyline+1, CharNum.num, "illegal character ignored:  " + yytext());
    CharNum.num++;
}
