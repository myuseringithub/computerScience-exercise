// EXAMPLE for cascading errors corret handling:

struct P { int x; bool y; }; 
struct P p; 
bool f(int x) {};


// Each of the following should cause only one error message:

// the type given to (true + 3) should be ErrorType, and the type-check method for the multiplication node should not report "Arithmetic operator applied to non-numeric operand" for the first operand.
(true + 3) * 4         // true + 3 is an error; the * is OK

cout << P + 1          // P + 1 is an error; the write is OK

true && (false || 3)   // false || 3 is an error; the && is OK

f("a" * 4);            // "a" * 4 is an error; the call is OK

1 + p();               // p() is an error; the + is OK

(true + 3) == x        // true + 3 is an error; the == is OK
                       // regardless of the type of x


// Each should cause two error messages:

true + "hello"    // one error for each of the non-int operands of the +

1 + f(true)       // one for the bad arg type and one for the 2nd operand of the +

1 + f(1, 2)       // one for the wrong number of args and one for the 2nd operand of the +

return 3+true;    // in a void function: one error for the 2nd operand to +
                  // and one for returning a value

