// declarations:
void f0(){}
void f(int p1) {}
void f2(bool p1) {}
int f3(int p1, bool p2) { return p1; }
struct P { int x; bool y; }; 
struct P p; 
int x;
bool b;

//******************************************************************************/
// CASCADING ERRORS: Each of the following should cause only one error message:
void t1() {
    x=// true + 3 is an error; the * is OK
    // the type given to (true + 3) should be ErrorType, and the type-check method for the multiplication node should //not report "Arithmetic operator applied to non-numeric operand" for the first operand.
    (true + 3) * 4;         

    // P + 1 is an error; the write is OK
    cout << P + 1;          

    x=// false || 3 is an error; the && is OK
    true && (false || 3);

    // "a" * 4 is an error; the call is OK
    f("a" * 4);             


    x=// p() is an error; the + is OK
    1 + p();                

    // true + 3 is an error; the == is OK. regardless of the type of x
    x=      (true + 3) == x;
    x=      (true + 3) == false;     
    x=      (true + 3) == 1;         
    x=      (true + 3) == f(1);         
}

//******************************************************************************/
// CASCADING ERRORS: Each should cause two error messages:
void t2() {
    x=// one error for each of the non-int operands of the +
    true + "hello";

    x=// one for the bad arg type and one for the 2nd operand of the +
    1 + f(true);       

    x=// one for the wrong number of args and one for the 2nd operand of the +
    1 + f(1, 2);       

    // in a void function: one error for the 2nd operand to + and one for returning a value
    return 3+true;    
}



//******************************************************************************/
// EXAMPLE PROVIDED
bool bbb;
struct S { int a; };
struct S t;

void g(int p1, bool p2) {
}

void main() {
    int aaa;

    // some errors involving illegal operations on functions
    aaa = g + g;
    bbb = g == 3;
    bbb = g > main;
    bbb = g == g;

    // some errors involving bad function calls 
    aaa();
    g();
    g(5);
    g(aaa, aaa);
    g(t, t.a);
    S();

    // some errors involving structs 
    t = 5;
    t = t;
    cin >> S;
    t = true || 3;
    bbb = S && t.a;

    // error involving return
    return 10;

    // other type errors 
    aaa = aaa + (!false);
    aaa = aaa + "foo";
    bbb = aaa;

    // don't give too many or too few error messages here 
    bbb = (aaa + true) && (bbb < true);
}




//******************************************************************************/
// typeErrors.cminusminus should contain code with errors detected by the type checker. For every type error listed in //the table above, you should include an instance of that error for each of the relevant operators, and in each part of //a program where the error can occur (e.g., in a top-level statement, in a statement inside a while loop, etc).
// NOTE: error message numbers are in ErrMsg.java
    // 11, 12, 13
    void f9() {return;} void f4() {return 1;}  void f5() {return false;}
    int f6() {return;} int f7() {return 1;}  int f8() {return false;} 

void t3() {
    x= // if lhs & rhs both are void function.
    f(1) == f(1);
    // 1, 2, 3, 4, 5, 6, 7
    cout << f; cout << P; cout << p; cout << f(1); cin >> f; cin >> P; cin >> p;
    // 8, 9, 10, 
    x(); x(1, false); f(1,2,3); f(false,true,false); f(false); f3(true,"true"); f3(1, true, 2); 
    // 14, 15
    x=1+true; x=1-true; x=1*true; x=1/true; b++; b--; x=1<true; x=1>true; x=1<=true; x=1>=true;
    // 16, 17, 18, 19
    b=!1; b=true&&1; b=true||1; if(1){} if(1){}else{} while(1){} repeat(true){} 
    // 20, 21, 22, 23, 
    x=1==true;x=x==true;x=1!=true;x=x!=true; x=true;b=1; x=f0()==f0();x=f0()!=f0(); x=f==f;x=f!=f; x=P==P;x=P!=P;if(P==P){} x=p==p;x=p!=p;if(p==p){}
    // 25, 26, 27
    f=g;P=P;p=p;

    if(true) {} else {if(true) {repeat(1) {while(true) {
        x= // if lhs & rhs both are void function.
        f(1) == f(1);
        // 1, 2, 3, 4, 5, 6, 7
        cout << f; cout << P; cout << p; cout << f(1); cin >> f; cin >> P; cin >> p;
        // 8, 9, 10, 
        x(); x(1, false); f(1,2,3); f(false,true,false); f(false); f3(true,"true"); f3(1, true, 2); 
        // 14, 15
        x=1+true; x=1-true; x=1*true; x=1/true; b++; b--; x=1<true; x=1>true; x=1<=true; x=1>=true;
        // 16, 17, 18, 19
        b=!1; b=true&&1; b=true||1; if(1){} if(1){}else{} while(1){} repeat(true){} 
        // 20, 21, 22, 23, 
        x=1==true;x=x==true;x=1!=true;x=x!=true; x=true;b=1; x=f0()==f0();x=f0()!=f0(); x=f==f;x=f!=f; x=P==P;x=P!=P;if(P==P){} x=p==p;x=p!=p;if(p==p){}
        // 25, 26, 27
        f=g;P=P;p=p;
    }}}}
}
